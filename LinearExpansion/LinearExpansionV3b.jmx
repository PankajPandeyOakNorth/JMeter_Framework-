<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="filePath" elementType="Argument">
            <stringProp name="Argument.name">filePath</stringProp>
            <stringProp name="Argument.value">C:\ACORN\LinearExpansion\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Create data based on linear expansion" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - check for relationships and dependencies" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//check for relationships
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
Boolean debug = false;

f = new FileOutputStream(vars.get(&quot;filePath&quot;).concat(&quot;tempCSV.csv&quot;), false);
p = new PrintStream(f); 
this.interpreter.setOut(p);
BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_inputs.csv&quot;)));
String line = null;
TreeSet relationshipCodes = new TreeSet();

while ((line = reader.readLine()) != null) {
	String[] lineDetails=line.split(&quot;,&quot;);	
	if (!lineDetails[0].trim().equals(&quot;0&quot;)) {
		relationshipCodes.add(Integer.parseInt(lineDetails[0]));
	} else {
		print(line);
	}
}
reader.close(); 
if (debug) log.info(relationshipCodes.toString());
Iterator itr = relationshipCodes.iterator();
while(itr.hasNext()) {
	List outerList = new ArrayList();
	String relationshipCode = String.valueOf(itr.next());//1
	if (debug) log.info(relationshipCode);
	BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_inputs.csv&quot;)));
	String line= null;
	while ((line = reader.readLine()) != null) {
		String[] lineDetails=line.split(&quot;,&quot;);
		if (lineDetails[0].equals(relationshipCode)) {
			List myList = new ArrayList();
			for (int i=2;i&lt;lineDetails.length;i++) {
				myList.add(lineDetails[i]);	
			}
			outerList.add(myList);
		}
	}
	reader.close();
	if (debug) log.info(outerList.toString());
	Boolean loop = true;
	int count=1;
	int position=0;
	String remodeledString=&quot;&quot;;
	while (loop) {
		String printString=&quot;&quot;;
		if (debug) log.info(String.valueOf(outerList.size()));
		for (int j=0;j&lt;outerList.size();j++) {
			String temp = outerList.get(j).get(position);
			if (debug) log.info(&quot;TEmp is &quot;+temp);
			printString = printString.concat(temp).concat(&quot;~&quot;);
			if (debug) log.info(&quot;print string is &quot;+printString);
		}
		count++;
		remodeledString=remodeledString.concat(printString.substring(0,printString.length()-1)).concat(&quot;,&quot;);
		position++;
		if (count &gt; outerList.get(0).size()) loop=false;
	}
	print(relationshipCode+&quot;,,&quot;+remodeledString.substring(0,remodeledString.length()-1));
	outerList=new ArrayList();
}
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - generated data based on linear expansion methodology" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//Generate test data
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
List outer = new ArrayList();
Boolean debug = false;
/*BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_inputs.csv&quot;)));
String header=&quot;&quot;;
String line= null;
while ((line = reader.readLine()) != null) {
	String[] lineDetails=line.split(&quot;,&quot;);
	header = header.concat(lineDetails[1]).concat(&quot;,&quot;);
}
reader.close();*/
String line = null;
String header=&quot;&quot;;
Boolean loop = true;
int internalCount = 0;
int overallCount =0;
int position = 0;
while (loop) {
	overallCount =0;
	BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_inputs.csv&quot;)));
	for (String line = reader.readLine(); line != null; line = reader.readLine()) {
	     String[] lineDetails=line.split(&quot;,&quot;);
	     overallCount++;
	     if (lineDetails[0].equals(String.valueOf(position))) {
	     	if (debug) log.info(&quot;Line Details [1] = &quot;+lineDetails[0]+&quot;, position = &quot;+String.valueOf(position));
			header = header.concat(lineDetails[1]).concat(&quot;,&quot;);
			internalCount++;
	     }
	}
	reader.close();
	position++;
	if (debug) log.info(&quot;Position: &quot;+String.valueOf(position)+&quot;, internalCount: &quot;+String.valueOf(internalCount)+&quot;,Overall Count: &quot;+String.valueOf(overallCount));
	if (internalCount &gt;= overallCount) {
		if (debug) log.info(&quot;Am in&quot;);
		loop = false;
	}
}



BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;tempCSV.csv&quot;)));
int count=0;
while ((line = reader.readLine()) != null) {
	String[] lineDetails=line.split(&quot;,&quot;);
	List myList = new ArrayList();	
	for (int i=2;i&lt;lineDetails.length;i++) {
		myList.add(lineDetails[i]);
	}
	outer.add(myList);
	count++;
}
reader.close();
f = new FileOutputStream(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_results.csv&quot;), false);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
if (debug) log.info(header);
print(header.substring(0,header.length()-1));
loop = true;
position = 0;
int i = 0;
if (debug) log.info(&quot;outer: &quot;+outer.toString());
while (loop) {
	String printString=&quot;&quot;;
	for (int j=0;j&lt;outer.size();j++) {
		if (debug) log.info(&quot;Outer Size: &quot;+String.valueOf(outer.size())+&quot;, value of j: &quot;+String.valueOf(j)+&quot;, value of position: &quot;+position);
		int k = (position == j?(i &gt;= outer.get(j).size()?0:i):0);
		if (debug) log.info(String.valueOf(k));
		String tempString =&quot;&quot;;
		if (outer.get(j).size()&gt;0) {
			tempString = outer.get(j).get(k);
		} 
		if (debug) log.info(tempString);
		if (j!=outer.size()-1)
			printString = printString.concat(tempString).concat(&quot;,&quot;);
		else
			printString = printString.concat(tempString);
		if (position == j &amp;&amp; i &gt;= (outer.get(j).size()-1)) {
	     	i = 0;
	     	position++;
		} else if (position == j)
     	   i++;
	}
	print(printString.replace(&quot;~&quot;,&quot;,&quot;));
	if (position &gt;= outer.size())
        loop = false;  
}
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor - dummy" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//check for relationships
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
Boolean debug = true;

String line = null;
String header=&quot;&quot;;
Boolean loop = true;
int internalCount = 0;
int overallCount =0;
int position = 0;
while (loop) {
	overallCount =0;
	BufferedReader reader =new BufferedReader(new FileReader(vars.get(&quot;filePath&quot;).concat(&quot;linearExpansion_inputs.csv&quot;)));
	for (String line = reader.readLine(); line != null; line = reader.readLine()) {
	     String[] lineDetails=line.split(&quot;,&quot;);
	     overallCount++;
	     if (lineDetails[0].equals(String.valueOf(position))) {
	     	log.info(&quot;Line Details [1] = &quot;+lineDetails[0]+&quot;, position = &quot;+String.valueOf(position));
			header = header.concat(lineDetails[1]).concat(&quot;,&quot;);
			internalCount++;
	     }
	}
	reader.close();
	position++;
	log.info(&quot;Position: &quot;+String.valueOf(position)+&quot;, internalCount: &quot;+String.valueOf(internalCount)+&quot;,Overall Count: &quot;+String.valueOf(overallCount));
	if (internalCount &gt;= overallCount) {
		log.info(&quot;Am in&quot;);
		loop = false;
	}
}
log.info(header);



</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make API call to collate responses" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers"/>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
